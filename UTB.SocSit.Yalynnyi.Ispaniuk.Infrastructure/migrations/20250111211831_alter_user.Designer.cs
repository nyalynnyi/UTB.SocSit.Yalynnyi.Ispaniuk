// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UTB.SocSit.Yalynnyi.Ispaniuk.Infrastructure.Database;

#nullable disable

namespace UTB.SocSit.Yalynnyi.Ispaniuk.Infrastructure.Migrations
{
    [DbContext(typeof(SocSitDbContext))]
    [Migration("20250111211831_alter_user")]
    partial class alter_user
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UTB.SocSit.Yalynnyi.Ispaniuk.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            PostID = 1,
                            Text = "Hello there",
                            UserID = 2
                        },
                        new
                        {
                            ID = 2,
                            PostID = 1,
                            Text = "Cool",
                            UserID = 4
                        },
                        new
                        {
                            ID = 3,
                            PostID = 1,
                            Text = "New era of social comunication begins today",
                            UserID = 5
                        },
                        new
                        {
                            ID = 4,
                            PostID = 5,
                            Text = "Nice job, keep going",
                            UserID = 4
                        },
                        new
                        {
                            ID = 5,
                            PostID = 4,
                            Text = "Cool place",
                            UserID = 5
                        });
                });

            modelBuilder.Entity("UTB.SocSit.Yalynnyi.Ispaniuk.Domain.Entities.Follow", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("FollowerID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Follow");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FollowerID = 2,
                            UserID = 1
                        },
                        new
                        {
                            ID = 2,
                            FollowerID = 2,
                            UserID = 1
                        },
                        new
                        {
                            ID = 3,
                            FollowerID = 3,
                            UserID = 1
                        },
                        new
                        {
                            ID = 4,
                            FollowerID = 4,
                            UserID = 1
                        },
                        new
                        {
                            ID = 5,
                            FollowerID = 1,
                            UserID = 2
                        },
                        new
                        {
                            ID = 6,
                            FollowerID = 4,
                            UserID = 2
                        },
                        new
                        {
                            ID = 7,
                            FollowerID = 5,
                            UserID = 2
                        },
                        new
                        {
                            ID = 8,
                            FollowerID = 5,
                            UserID = 4
                        },
                        new
                        {
                            ID = 9,
                            FollowerID = 4,
                            UserID = 5
                        },
                        new
                        {
                            ID = 10,
                            FollowerID = 4,
                            UserID = 3
                        });
                });

            modelBuilder.Entity("UTB.SocSit.Yalynnyi.Ispaniuk.Domain.Entities.Media", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Media");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Link = "/media/4_1.jpg",
                            PostID = 4
                        },
                        new
                        {
                            ID = 2,
                            Link = "/media/4_2.jpg",
                            PostID = 4
                        },
                        new
                        {
                            ID = 3,
                            Link = "/media/4_3.jpg",
                            PostID = 4
                        },
                        new
                        {
                            ID = 4,
                            Link = "/media/5_1.mp4",
                            PostID = 5
                        });
                });

            modelBuilder.Entity("UTB.SocSit.Yalynnyi.Ispaniuk.Domain.Entities.Post", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Post");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Text = "This is the first post on this network. Wow",
                            UserID = 1
                        },
                        new
                        {
                            ID = 2,
                            Text = "Hello world",
                            UserID = 2
                        },
                        new
                        {
                            ID = 3,
                            Text = "Let's try something new. What about this?",
                            UserID = 4
                        },
                        new
                        {
                            ID = 4,
                            Text = "My the latest photos from NA",
                            UserID = 2
                        },
                        new
                        {
                            ID = 5,
                            Text = "My first video from drone. What's your score?",
                            UserID = 3
                        });
                });

            modelBuilder.Entity("UTB.SocSit.Yalynnyi.Ispaniuk.Domain.Entities.Reaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Like")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Reaction");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Like = true,
                            PostID = 1,
                            UserID = 2
                        },
                        new
                        {
                            ID = 2,
                            Like = true,
                            PostID = 1,
                            UserID = 4
                        },
                        new
                        {
                            ID = 3,
                            Like = true,
                            PostID = 2,
                            UserID = 1
                        },
                        new
                        {
                            ID = 4,
                            Like = true,
                            PostID = 4,
                            UserID = 1
                        },
                        new
                        {
                            ID = 5,
                            Like = true,
                            PostID = 4,
                            UserID = 5
                        },
                        new
                        {
                            ID = 6,
                            Like = true,
                            PostID = 4,
                            UserID = 2
                        },
                        new
                        {
                            ID = 7,
                            Like = true,
                            PostID = 4,
                            UserID = 4
                        },
                        new
                        {
                            ID = 8,
                            Like = true,
                            PostID = 5,
                            UserID = 4
                        },
                        new
                        {
                            ID = 9,
                            Like = true,
                            PostID = 5,
                            UserID = 1
                        },
                        new
                        {
                            ID = 10,
                            Like = true,
                            PostID = 5,
                            UserID = 2
                        },
                        new
                        {
                            ID = 11,
                            Like = false,
                            PostID = 4,
                            UserID = 3
                        });
                });

            modelBuilder.Entity("UTB.SocSit.Yalynnyi.Ispaniuk.Infrastructure.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("UTB.SocSit.Yalynnyi.Ispaniuk.Infrastructure.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Photo")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09d3e95c-c1bc-4261-a20e-ec49d9072939",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "orpha_terry@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Orpha Terry",
                            PhoneNumberConfirmed = false,
                            Photo = "/img/user/default.jpg",
                            TwoFactorEnabled = false,
                            UserName = "orpha_terry"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a1da46c-4353-4adf-beca-8ed054430185",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marta.berge47@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Marta Berge",
                            PhoneNumberConfirmed = false,
                            Photo = "/img/user/default.jpg",
                            TwoFactorEnabled = false,
                            UserName = "marta_berge"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5fd4a7ed-e5dc-4592-b4dc-804283fdb962",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jamir_kshlerin@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Jamir Kshlerin",
                            PhoneNumberConfirmed = false,
                            Photo = "/img/user/default.jpg",
                            TwoFactorEnabled = false,
                            UserName = "j_kshlerin"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b768b6b5-4b79-4c57-9d1b-2b5bf3df0e24",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "rico_spinka66@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Rico Spinka",
                            PhoneNumberConfirmed = false,
                            Photo = "/img/user/default.jpg",
                            TwoFactorEnabled = false,
                            UserName = "rico_spinka"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "816365a6-fd21-49ff-b2f8-b74b9ce04891",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ottilie.emmerich43@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Ottilie Emmerich",
                            PhoneNumberConfirmed = false,
                            Photo = "/img/user/default.jpg",
                            TwoFactorEnabled = false,
                            UserName = "emmerich43"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("UTB.SocSit.Yalynnyi.Ispaniuk.Infrastructure.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("UTB.SocSit.Yalynnyi.Ispaniuk.Infrastructure.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("UTB.SocSit.Yalynnyi.Ispaniuk.Infrastructure.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("UTB.SocSit.Yalynnyi.Ispaniuk.Infrastructure.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UTB.SocSit.Yalynnyi.Ispaniuk.Infrastructure.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("UTB.SocSit.Yalynnyi.Ispaniuk.Infrastructure.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
